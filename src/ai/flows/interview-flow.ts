// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview A flow to conduct a mock job interview.
 *
 * - conductInterview - A function that handles the interview question generation.
 * - InterviewInput - The input type for the conductInterview function.
 * - InterviewOutput - The return type for the conductInterview function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const InterviewInputSchema = z.object({
  jobRole: z.string().describe('The job role the user is interviewing for (e.g., "Software Engineer").'),
  history: z.array(z.object({
    role: z.enum(['user', 'model']),
    content: z.string(),
  })).optional().describe('The history of the conversation so far.'),
});
export type InterviewInput = z.infer<typeof InterviewInputSchema>;

const InterviewOutputSchema = z.object({
  question: z.string().describe('The next interview question to ask the user.'),
});
export type InterviewOutput = z.infer<typeof InterviewOutputSchema>;

export async function conductInterview(input: InterviewInput): Promise<InterviewOutput> {
  return interviewFlow(input);
}

const interviewPrompt = ai.definePrompt({
  name: 'interviewPrompt',
  input: {schema: InterviewInputSchema},
  output: {schema: InterviewOutputSchema},
  prompt: `You are an expert interviewer conducting a mock interview for the role of {{jobRole}}. 
  
  Your goal is to ask relevant, insightful questions to gauge the candidate's skills and experience.
  
  {{#if history}}
  Here is the conversation history so far:
  {{#each history}}
  *   **{{role}}:** {{content}}
  {{/each}}
  
  Based on the history, ask the next logical question. Do not repeat questions.
  {{else}}
  Start the interview by asking an introductory question.
  {{/if}}

  Provide only the question in your response.
  `,
});

const interviewFlow = ai.defineFlow(
  {
    name: 'interviewFlow',
    inputSchema: InterviewInputSchema,
    outputSchema: InterviewOutputSchema,
  },
  async (input) => {
    const {output} = await interviewPrompt(input);
    return output!;
  }
);
